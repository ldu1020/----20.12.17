{"version":3,"sources":["api/contact-list.ts","components/contact-list/contact-list-item.tsx","components/contact-list/contact-list.tsx","components/header/header.tsx","components/search-bar/search-bar.tsx","App.tsx","index.tsx"],"names":["a","requestOptions","method","fetch","then","res","json","catch","error","console","log","StyledItem","styled","li","Name","h3","PhoneNumber","p","ProfileImage","img","FavoritesBtn","button","props","favorite","ContactListItem","phoneNumner","contactListData","updateFavorite","name","phoneNumber","profileImage","src","alt","substr","onClick","React","memo","StyledUl","ul","ContactList","contactList","map","data","StyledHeader","header","H1","h1","Header","StyledForm","form","StyledInput","input","InputIcon","SearchBar","searchName","placeholder","onChange","StyledContanier","section","App","fetchContactList","useState","initailContactList","setInitailContactList","setContactList","useEffect","sortForName","favoriteListWithLocal","localStorage","getItem","JSON","parse","forEach","localData","index","findIndex","item","splice","useCallback","indexOf","updated","favoriteList","filter","setItem","stringify","e","result","target","value","length","list","sort","b","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95c4ba04.chunk.js","sourcesContent":["/** @format */\r\n\r\nexport async function fetchContactListAll(): Promise<ContactListType[]> {\r\n  const requestOptions = {\r\n    method: 'GET',\r\n  };\r\n  return fetch('http://localhost:4000/user/list', requestOptions) //\r\n    .then((res) => res.json())\r\n    .catch((error) => console.log('error', error));\r\n}\r\n","/** @format */\r\n\r\nimport React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst emptyHeart =\r\n  'https://storage.googleapis.com/snuper-static/mock_users/heart_empty.svg';\r\nconst filledHeart =\r\n  'https://storage.googleapis.com/snuper-static/mock_users/heart_filled.svg';\r\n\r\nconst StyledItem = styled.li`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nconst Name = styled.h3`\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst PhoneNumber = styled.p`\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst ProfileImage = styled.img`\r\n  width: 48px;\r\n  height: 48px;\r\n  margin-right: 15px;\r\n`;\r\n\r\nconst FavoritesBtn = styled.button`\r\n  position: absolute;\r\n  right: 12px;\r\n  width: 25px;\r\n  height: 25px;\r\n  background: ${(props: { favorite: boolean }) =>\r\n    `url(${props.favorite ? filledHeart : emptyHeart}) no-repeat top left`};\r\n  background-size: contain;\r\n`;\r\n\r\ninterface Props {\r\n  contactListData: ContactListType;\r\n  updateFavorite: (item: ContactListType) => void;\r\n}\r\n\r\nconst ContactListItem: React.FC<Props> = ({\r\n  contactListData,\r\n  updateFavorite,\r\n}) => {\r\n  const { name, phoneNumber, profileImage, favorite } = contactListData;\r\n\r\n  return (\r\n    <StyledItem>\r\n      <ProfileImage src={profileImage} alt='profile' />\r\n      <div>\r\n        <Name>{name}</Name>\r\n        <PhoneNumber>{addHyphen(phoneNumber)}</PhoneNumber>\r\n      </div>\r\n      <FavoritesBtn\r\n        favorite={favorite!}\r\n        onClick={() => {\r\n          updateFavorite(contactListData);\r\n        }}\r\n      />\r\n    </StyledItem>\r\n  );\r\n};\r\n\r\nfunction addHyphen(phoneNumner: string) {\r\n  return (\r\n    phoneNumner.substr(0, 3) +\r\n    '-' +\r\n    phoneNumner.substr(3, 4) +\r\n    '-' +\r\n    phoneNumner.substr(7)\r\n  );\r\n}\r\n\r\nexport default React.memo(ContactListItem);\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport ContactListItem from './contact-list-item';\r\n\r\ninterface Props {\r\n  contactList: ContactListType[];\r\n  updateFavorite: (item: ContactListType) => void;\r\n}\r\n\r\nconst StyledUl = styled.ul`\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst ContactList: React.FC<Props> = ({ contactList, updateFavorite }) => {\r\n  return (\r\n    <section>\r\n      <StyledUl>\r\n        {contactList.map((data) => (\r\n          <ContactListItem\r\n            key={data.phoneNumber}\r\n            contactListData={data}\r\n            updateFavorite={updateFavorite}\r\n          />\r\n        ))}\r\n      </StyledUl>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContactList);\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledHeader = styled.header`\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n  font-size: 23px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Header = () => {\r\n  return (\r\n    <StyledHeader>\r\n      <H1>연락처</H1>\r\n    </StyledHeader>\r\n  );\r\n};\r\n\r\nexport default React.memo(Header);\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  margin-bottom: 15px;\r\n  position: relative;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  height: 29px;\r\n  font-size: 15px;\r\n  background-color: #dfdfdf;\r\n  border-radius: 5px;\r\n  padding: 6px;\r\n  padding-left: 30px;\r\n  outline: none;\r\n  border: none;\r\n`;\r\n\r\nconst InputIcon = styled.img`\r\n  height: 100%;\r\n  padding: 7px;\r\n  position: absolute;\r\n  left: 0;\r\n`;\r\n\r\nconst SearchIcon =\r\n  'https://storage.googleapis.com/snuper-static/mock_users/search.svg';\r\n\r\ninterface Props {\r\n  searchName: (e: any) => void;\r\n}\r\n\r\nconst SearchBar: React.FC<Props> = ({ searchName }) => {\r\n  return (\r\n    <StyledForm>\r\n      <InputIcon src={SearchIcon} />\r\n      <StyledInput placeholder='검색' onChange={searchName}></StyledInput>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchBar);\r\n","/** @format */\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport ContactList from './components/contact-list/contact-list';\nimport Header from './components/header/header';\nimport SearchBar from './components/search-bar/search-bar';\n\nconst StyledContanier = styled.section`\n  margin: 10px auto;\n  border: 1px solid black;\n  width: 375px;\n  height: 667px;\n  padding: 20px 15px;\n  overflow-y: auto;\n`;\n\ninterface Props {\n  fetchContactList: () => Promise<ContactListType[]>;\n}\n\nconst App: React.FC<Props> = ({ fetchContactList }) => {\n  //초기화 및 데이터 검색을 위한 초기 데이터 목록입니다.\n  const [initailContactList, setInitailContactList] = useState<\n    ContactListType[]\n  >();\n  //사용자의 눈에 보여지는 목록입니다\n  const [contactList, setContactList] = useState<ContactListType[]>();\n\n  useEffect(() => {\n    fetchContactList() //\n      .then((res) => sortForName(res))\n      .then((res) => {\n        const favoriteListWithLocal = localStorage.getItem('favoriteList');\n        // LocalStorage에 에 데이터가 있다면 즐겨찾기 부분을 업데이트 해줍니다.\n        if (favoriteListWithLocal) {\n          JSON.parse(favoriteListWithLocal) //\n            .forEach((localData: ContactListType) => {\n              const index = res.findIndex(\n                (item) => item.phoneNumber === localData.phoneNumber\n              );\n              index !== -1 && res.splice(index, 1, localData);\n            });\n        }\n\n        setContactList(res);\n        setInitailContactList(res);\n      });\n  }, [fetchContactList]);\n\n  // 즐겨찾기 아이콘 클릭시 실행되는 함수입니다.\n  const updateFavorite = useCallback(\n    (item: ContactListType) => {\n      const index = contactList?.indexOf(item);\n      const updated = [...contactList!];\n      item.favorite = !item.favorite;\n      updated[index!] = item;\n\n      const favoriteList = updated.filter((li) => li.favorite === true);\n      localStorage.setItem('favoriteList', JSON.stringify(favoriteList));\n      setContactList(updated);\n    },\n    [contactList]\n  );\n\n  // 검색란에 값의 변경이 있을시 실행되는 함수입니다.\n  const searchName = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const result = initailContactList!.filter(\n        (li) => li.name.indexOf(e.target.value) !== -1\n      );\n      result && setContactList(sortForName(result));\n      e.target.value.length === 0 && setContactList(initailContactList);\n    },\n    [initailContactList]\n  );\n\n  return (\n    <StyledContanier>\n      <Header />\n      <SearchBar searchName={searchName} />\n      {contactList && (\n        <ContactList\n          contactList={contactList}\n          updateFavorite={updateFavorite}\n        />\n      )}\n    </StyledContanier>\n  );\n};\n\nfunction sortForName(list: ContactListType[]) {\n  return list //\n    .sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n}\n\nexport default React.memo(App);\n","/** @format */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { fetchContactListAll } from './api/contact-list';\nimport App from './App';\nimport './index.css';\n\n//fetch 와 같은 네트워크와 통신하는 함수는 컴포넌트의 함수 재생성의 영향을 받지 않도록, 또한 테스트의 용의성을 위해 외부에서 주입시키는 방식을 채택했습니다.\n\nReactDOM.render(\n  <React.StrictMode>\n    <App fetchContactList={fetchContactListAll} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}